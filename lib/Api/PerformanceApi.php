<?php
/**
 * PerformanceApi
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.8.0
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\nucleus\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com\hydrogen\nucleus\ApiException;
use com\hydrogen\nucleus\Configuration;
use com\hydrogen\nucleus\HeaderSelector;
use com\hydrogen\nucleus\ObjectSerializer;

/**
 * PerformanceApi Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PerformanceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAccountPerformanceUsingGet
     *
     * Account Performance
     *
     * @param  string $account_id Account Id -/account (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type - /statistics (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getAccountPerformanceUsingGet($account_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        list($response) = $this->getAccountPerformanceUsingGetWithHttpInfo($account_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);
        return $response;
    }

    /**
     * Operation getAccountPerformanceUsingGetWithHttpInfo
     *
     * Account Performance
     *
     * @param  string $account_id Account Id -/account (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type - /statistics (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountPerformanceUsingGetWithHttpInfo($account_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        $returnType = 'object';
        $request = $this->getAccountPerformanceUsingGetRequest($account_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountPerformanceUsingGetAsync
     *
     * Account Performance
     *
     * @param  string $account_id Account Id -/account (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type - /statistics (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountPerformanceUsingGetAsync($account_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        return $this->getAccountPerformanceUsingGetAsyncWithHttpInfo($account_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountPerformanceUsingGetAsyncWithHttpInfo
     *
     * Account Performance
     *
     * @param  string $account_id Account Id -/account (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type - /statistics (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountPerformanceUsingGetAsyncWithHttpInfo($account_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        $returnType = 'object';
        $request = $this->getAccountPerformanceUsingGetRequest($account_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountPerformanceUsingGet'
     *
     * @param  string $account_id Account Id -/account (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type - /statistics (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountPerformanceUsingGetRequest($account_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getAccountPerformanceUsingGet'
            );
        }

        $resourcePath = '/account/{account_id}/performance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($active_premium_period !== null) {
            $queryParams['active_premium_period'] = ObjectSerializer::toQueryValue($active_premium_period);
        }
        // query params
        if ($annualized_return_period !== null) {
            $queryParams['annualized_return_period'] = ObjectSerializer::toQueryValue($annualized_return_period);
        }
        // query params
        if ($benchmark_id !== null) {
            $queryParams['benchmark_id'] = ObjectSerializer::toQueryValue($benchmark_id);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($hist_factor !== null) {
            $queryParams['hist_factor'] = ObjectSerializer::toQueryValue($hist_factor);
        }
        // query params
        if ($mar_down_side_deviation !== null) {
            $queryParams['mar_down_side_deviation'] = ObjectSerializer::toQueryValue($mar_down_side_deviation);
        }
        // query params
        if ($max_percentile_monte_carlo !== null) {
            $queryParams['max_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($max_percentile_monte_carlo);
        }
        // query params
        if ($mean_percentile_monte_carlo !== null) {
            $queryParams['mean_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($mean_percentile_monte_carlo);
        }
        // query params
        if ($min_percentile_monte_carlo !== null) {
            $queryParams['min_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($min_percentile_monte_carlo);
        }
        // query params
        if ($moving_average_n_day !== null) {
            $queryParams['moving_average_n_day'] = ObjectSerializer::toQueryValue($moving_average_n_day);
        }
        // query params
        if ($n_day_returns !== null) {
            $queryParams['n_day_returns'] = ObjectSerializer::toQueryValue($n_day_returns);
        }
        // query params
        if ($n_path_monte_carlo !== null) {
            $queryParams['n_path_monte_carlo'] = ObjectSerializer::toQueryValue($n_path_monte_carlo);
        }
        // query params
        if ($n_rolling_max_drawdown !== null) {
            $queryParams['n_rolling_max_drawdown'] = ObjectSerializer::toQueryValue($n_rolling_max_drawdown);
        }
        // query params
        if ($n_rolling_volatility !== null) {
            $queryParams['n_rolling_volatility'] = ObjectSerializer::toQueryValue($n_rolling_volatility);
        }
        // query params
        if ($num_sim_monte_carlo !== null) {
            $queryParams['num_sim_monte_carlo'] = ObjectSerializer::toQueryValue($num_sim_monte_carlo);
        }
        // query params
        if ($period_type !== null) {
            $queryParams['period_type'] = ObjectSerializer::toQueryValue($period_type);
        }
        // query params
        if ($risk_free_alpha !== null) {
            $queryParams['risk_free_alpha'] = ObjectSerializer::toQueryValue($risk_free_alpha);
        }
        // query params
        if ($risk_free_sharpe !== null) {
            $queryParams['risk_free_sharpe'] = ObjectSerializer::toQueryValue($risk_free_sharpe);
        }
        // query params
        if ($risk_free_sortino !== null) {
            $queryParams['risk_free_sortino'] = ObjectSerializer::toQueryValue($risk_free_sortino);
        }
        // query params
        if ($risk_free_treynor !== null) {
            $queryParams['risk_free_treynor'] = ObjectSerializer::toQueryValue($risk_free_treynor);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($stat !== null) {
            $queryParams['stat'] = ObjectSerializer::toQueryValue($stat);
        }
        // query params
        if ($var_conf_interval !== null) {
            $queryParams['var_conf_interval'] = ObjectSerializer::toQueryValue($var_conf_interval);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllocationPerformanceUsingGet
     *
     * Allocation Performance
     *
     * @param  string $allocation_id Allocation Id -/allocation (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Tenant Benchmark Id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  bool $is_current_weight is_current_weight (optional, default to true)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type found under the Statistics banner (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function getAllocationPerformanceUsingGet($allocation_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $is_current_weight = 'true', $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        list($response) = $this->getAllocationPerformanceUsingGetWithHttpInfo($allocation_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $is_current_weight, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);
        return $response;
    }

    /**
     * Operation getAllocationPerformanceUsingGetWithHttpInfo
     *
     * Allocation Performance
     *
     * @param  string $allocation_id Allocation Id -/allocation (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Tenant Benchmark Id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  bool $is_current_weight is_current_weight (optional, default to true)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type found under the Statistics banner (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllocationPerformanceUsingGetWithHttpInfo($allocation_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $is_current_weight = 'true', $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        $returnType = 'map[string,object]';
        $request = $this->getAllocationPerformanceUsingGetRequest($allocation_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $is_current_weight, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllocationPerformanceUsingGetAsync
     *
     * Allocation Performance
     *
     * @param  string $allocation_id Allocation Id -/allocation (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Tenant Benchmark Id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  bool $is_current_weight is_current_weight (optional, default to true)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type found under the Statistics banner (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllocationPerformanceUsingGetAsync($allocation_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $is_current_weight = 'true', $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        return $this->getAllocationPerformanceUsingGetAsyncWithHttpInfo($allocation_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $is_current_weight, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllocationPerformanceUsingGetAsyncWithHttpInfo
     *
     * Allocation Performance
     *
     * @param  string $allocation_id Allocation Id -/allocation (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Tenant Benchmark Id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  bool $is_current_weight is_current_weight (optional, default to true)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type found under the Statistics banner (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllocationPerformanceUsingGetAsyncWithHttpInfo($allocation_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $is_current_weight = 'true', $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        $returnType = 'map[string,object]';
        $request = $this->getAllocationPerformanceUsingGetRequest($allocation_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $is_current_weight, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllocationPerformanceUsingGet'
     *
     * @param  string $allocation_id Allocation Id -/allocation (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Tenant Benchmark Id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  bool $is_current_weight is_current_weight (optional, default to true)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type found under the Statistics banner (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllocationPerformanceUsingGetRequest($allocation_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $is_current_weight = 'true', $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        // verify the required parameter 'allocation_id' is set
        if ($allocation_id === null || (is_array($allocation_id) && count($allocation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allocation_id when calling getAllocationPerformanceUsingGet'
            );
        }

        $resourcePath = '/allocation/{allocation_id}/performance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($active_premium_period !== null) {
            $queryParams['active_premium_period'] = ObjectSerializer::toQueryValue($active_premium_period);
        }
        // query params
        if ($annualized_return_period !== null) {
            $queryParams['annualized_return_period'] = ObjectSerializer::toQueryValue($annualized_return_period);
        }
        // query params
        if ($benchmark_id !== null) {
            $queryParams['benchmark_id'] = ObjectSerializer::toQueryValue($benchmark_id);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($hist_factor !== null) {
            $queryParams['hist_factor'] = ObjectSerializer::toQueryValue($hist_factor);
        }
        // query params
        if ($is_current_weight !== null) {
            $queryParams['is_current_weight'] = ObjectSerializer::toQueryValue($is_current_weight);
        }
        // query params
        if ($mar_down_side_deviation !== null) {
            $queryParams['mar_down_side_deviation'] = ObjectSerializer::toQueryValue($mar_down_side_deviation);
        }
        // query params
        if ($max_percentile_monte_carlo !== null) {
            $queryParams['max_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($max_percentile_monte_carlo);
        }
        // query params
        if ($mean_percentile_monte_carlo !== null) {
            $queryParams['mean_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($mean_percentile_monte_carlo);
        }
        // query params
        if ($min_percentile_monte_carlo !== null) {
            $queryParams['min_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($min_percentile_monte_carlo);
        }
        // query params
        if ($moving_average_n_day !== null) {
            $queryParams['moving_average_n_day'] = ObjectSerializer::toQueryValue($moving_average_n_day);
        }
        // query params
        if ($n_day_returns !== null) {
            $queryParams['n_day_returns'] = ObjectSerializer::toQueryValue($n_day_returns);
        }
        // query params
        if ($n_path_monte_carlo !== null) {
            $queryParams['n_path_monte_carlo'] = ObjectSerializer::toQueryValue($n_path_monte_carlo);
        }
        // query params
        if ($n_rolling_max_drawdown !== null) {
            $queryParams['n_rolling_max_drawdown'] = ObjectSerializer::toQueryValue($n_rolling_max_drawdown);
        }
        // query params
        if ($n_rolling_volatility !== null) {
            $queryParams['n_rolling_volatility'] = ObjectSerializer::toQueryValue($n_rolling_volatility);
        }
        // query params
        if ($num_sim_monte_carlo !== null) {
            $queryParams['num_sim_monte_carlo'] = ObjectSerializer::toQueryValue($num_sim_monte_carlo);
        }
        // query params
        if ($period_type !== null) {
            $queryParams['period_type'] = ObjectSerializer::toQueryValue($period_type);
        }
        // query params
        if ($risk_free_alpha !== null) {
            $queryParams['risk_free_alpha'] = ObjectSerializer::toQueryValue($risk_free_alpha);
        }
        // query params
        if ($risk_free_sharpe !== null) {
            $queryParams['risk_free_sharpe'] = ObjectSerializer::toQueryValue($risk_free_sharpe);
        }
        // query params
        if ($risk_free_sortino !== null) {
            $queryParams['risk_free_sortino'] = ObjectSerializer::toQueryValue($risk_free_sortino);
        }
        // query params
        if ($risk_free_treynor !== null) {
            $queryParams['risk_free_treynor'] = ObjectSerializer::toQueryValue($risk_free_treynor);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($stat !== null) {
            $queryParams['stat'] = ObjectSerializer::toQueryValue($stat);
        }
        // query params
        if ($var_conf_interval !== null) {
            $queryParams['var_conf_interval'] = ObjectSerializer::toQueryValue($var_conf_interval);
        }

        // path params
        if ($allocation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'allocation_id' . '}',
                ObjectSerializer::toPathValue($allocation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBenchmarkPerformanceUsingGet
     *
     * Benchmark Performance
     *
     * @param  string $benchmark_id Benchmark Id - /benchmark (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $comparison_benchmark_id comparison_benchmark_id (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat Stat type - /statistics endpoint (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getBenchmarkPerformanceUsingGet($benchmark_id, $active_premium_period = null, $annualized_return_period = null, $comparison_benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        list($response) = $this->getBenchmarkPerformanceUsingGetWithHttpInfo($benchmark_id, $active_premium_period, $annualized_return_period, $comparison_benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);
        return $response;
    }

    /**
     * Operation getBenchmarkPerformanceUsingGetWithHttpInfo
     *
     * Benchmark Performance
     *
     * @param  string $benchmark_id Benchmark Id - /benchmark (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $comparison_benchmark_id comparison_benchmark_id (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat Stat type - /statistics endpoint (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBenchmarkPerformanceUsingGetWithHttpInfo($benchmark_id, $active_premium_period = null, $annualized_return_period = null, $comparison_benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        $returnType = 'object';
        $request = $this->getBenchmarkPerformanceUsingGetRequest($benchmark_id, $active_premium_period, $annualized_return_period, $comparison_benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBenchmarkPerformanceUsingGetAsync
     *
     * Benchmark Performance
     *
     * @param  string $benchmark_id Benchmark Id - /benchmark (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $comparison_benchmark_id comparison_benchmark_id (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat Stat type - /statistics endpoint (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBenchmarkPerformanceUsingGetAsync($benchmark_id, $active_premium_period = null, $annualized_return_period = null, $comparison_benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        return $this->getBenchmarkPerformanceUsingGetAsyncWithHttpInfo($benchmark_id, $active_premium_period, $annualized_return_period, $comparison_benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBenchmarkPerformanceUsingGetAsyncWithHttpInfo
     *
     * Benchmark Performance
     *
     * @param  string $benchmark_id Benchmark Id - /benchmark (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $comparison_benchmark_id comparison_benchmark_id (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat Stat type - /statistics endpoint (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBenchmarkPerformanceUsingGetAsyncWithHttpInfo($benchmark_id, $active_premium_period = null, $annualized_return_period = null, $comparison_benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        $returnType = 'object';
        $request = $this->getBenchmarkPerformanceUsingGetRequest($benchmark_id, $active_premium_period, $annualized_return_period, $comparison_benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBenchmarkPerformanceUsingGet'
     *
     * @param  string $benchmark_id Benchmark Id - /benchmark (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $comparison_benchmark_id comparison_benchmark_id (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat Stat type - /statistics endpoint (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBenchmarkPerformanceUsingGetRequest($benchmark_id, $active_premium_period = null, $annualized_return_period = null, $comparison_benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        // verify the required parameter 'benchmark_id' is set
        if ($benchmark_id === null || (is_array($benchmark_id) && count($benchmark_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $benchmark_id when calling getBenchmarkPerformanceUsingGet'
            );
        }

        $resourcePath = '/benchmark/{benchmark_id}/performance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($active_premium_period !== null) {
            $queryParams['active_premium_period'] = ObjectSerializer::toQueryValue($active_premium_period);
        }
        // query params
        if ($annualized_return_period !== null) {
            $queryParams['annualized_return_period'] = ObjectSerializer::toQueryValue($annualized_return_period);
        }
        // query params
        if ($comparison_benchmark_id !== null) {
            $queryParams['comparison_benchmark_id'] = ObjectSerializer::toQueryValue($comparison_benchmark_id);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($hist_factor !== null) {
            $queryParams['hist_factor'] = ObjectSerializer::toQueryValue($hist_factor);
        }
        // query params
        if ($mar_down_side_deviation !== null) {
            $queryParams['mar_down_side_deviation'] = ObjectSerializer::toQueryValue($mar_down_side_deviation);
        }
        // query params
        if ($max_percentile_monte_carlo !== null) {
            $queryParams['max_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($max_percentile_monte_carlo);
        }
        // query params
        if ($mean_percentile_monte_carlo !== null) {
            $queryParams['mean_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($mean_percentile_monte_carlo);
        }
        // query params
        if ($min_percentile_monte_carlo !== null) {
            $queryParams['min_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($min_percentile_monte_carlo);
        }
        // query params
        if ($moving_average_n_day !== null) {
            $queryParams['moving_average_n_day'] = ObjectSerializer::toQueryValue($moving_average_n_day);
        }
        // query params
        if ($n_day_returns !== null) {
            $queryParams['n_day_returns'] = ObjectSerializer::toQueryValue($n_day_returns);
        }
        // query params
        if ($n_path_monte_carlo !== null) {
            $queryParams['n_path_monte_carlo'] = ObjectSerializer::toQueryValue($n_path_monte_carlo);
        }
        // query params
        if ($n_rolling_max_drawdown !== null) {
            $queryParams['n_rolling_max_drawdown'] = ObjectSerializer::toQueryValue($n_rolling_max_drawdown);
        }
        // query params
        if ($n_rolling_volatility !== null) {
            $queryParams['n_rolling_volatility'] = ObjectSerializer::toQueryValue($n_rolling_volatility);
        }
        // query params
        if ($num_sim_monte_carlo !== null) {
            $queryParams['num_sim_monte_carlo'] = ObjectSerializer::toQueryValue($num_sim_monte_carlo);
        }
        // query params
        if ($period_type !== null) {
            $queryParams['period_type'] = ObjectSerializer::toQueryValue($period_type);
        }
        // query params
        if ($risk_free_alpha !== null) {
            $queryParams['risk_free_alpha'] = ObjectSerializer::toQueryValue($risk_free_alpha);
        }
        // query params
        if ($risk_free_sharpe !== null) {
            $queryParams['risk_free_sharpe'] = ObjectSerializer::toQueryValue($risk_free_sharpe);
        }
        // query params
        if ($risk_free_sortino !== null) {
            $queryParams['risk_free_sortino'] = ObjectSerializer::toQueryValue($risk_free_sortino);
        }
        // query params
        if ($risk_free_treynor !== null) {
            $queryParams['risk_free_treynor'] = ObjectSerializer::toQueryValue($risk_free_treynor);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($stat !== null) {
            $queryParams['stat'] = ObjectSerializer::toQueryValue($stat);
        }
        // query params
        if ($var_conf_interval !== null) {
            $queryParams['var_conf_interval'] = ObjectSerializer::toQueryValue($var_conf_interval);
        }

        // path params
        if ($benchmark_id !== null) {
            $resourcePath = str_replace(
                '{' . 'benchmark_id' . '}',
                ObjectSerializer::toPathValue($benchmark_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClientPerformanceUsingGet
     *
     * Client Performance
     *
     * @param  string $client_id Client Id -/client (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type -- /statistics (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getClientPerformanceUsingGet($client_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        list($response) = $this->getClientPerformanceUsingGetWithHttpInfo($client_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);
        return $response;
    }

    /**
     * Operation getClientPerformanceUsingGetWithHttpInfo
     *
     * Client Performance
     *
     * @param  string $client_id Client Id -/client (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type -- /statistics (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClientPerformanceUsingGetWithHttpInfo($client_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        $returnType = 'object';
        $request = $this->getClientPerformanceUsingGetRequest($client_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClientPerformanceUsingGetAsync
     *
     * Client Performance
     *
     * @param  string $client_id Client Id -/client (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type -- /statistics (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClientPerformanceUsingGetAsync($client_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        return $this->getClientPerformanceUsingGetAsyncWithHttpInfo($client_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClientPerformanceUsingGetAsyncWithHttpInfo
     *
     * Client Performance
     *
     * @param  string $client_id Client Id -/client (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type -- /statistics (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClientPerformanceUsingGetAsyncWithHttpInfo($client_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        $returnType = 'object';
        $request = $this->getClientPerformanceUsingGetRequest($client_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClientPerformanceUsingGet'
     *
     * @param  string $client_id Client Id -/client (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type -- /statistics (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getClientPerformanceUsingGetRequest($client_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling getClientPerformanceUsingGet'
            );
        }

        $resourcePath = '/client/{client_id}/performance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($active_premium_period !== null) {
            $queryParams['active_premium_period'] = ObjectSerializer::toQueryValue($active_premium_period);
        }
        // query params
        if ($annualized_return_period !== null) {
            $queryParams['annualized_return_period'] = ObjectSerializer::toQueryValue($annualized_return_period);
        }
        // query params
        if ($benchmark_id !== null) {
            $queryParams['benchmark_id'] = ObjectSerializer::toQueryValue($benchmark_id);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($hist_factor !== null) {
            $queryParams['hist_factor'] = ObjectSerializer::toQueryValue($hist_factor);
        }
        // query params
        if ($mar_down_side_deviation !== null) {
            $queryParams['mar_down_side_deviation'] = ObjectSerializer::toQueryValue($mar_down_side_deviation);
        }
        // query params
        if ($max_percentile_monte_carlo !== null) {
            $queryParams['max_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($max_percentile_monte_carlo);
        }
        // query params
        if ($mean_percentile_monte_carlo !== null) {
            $queryParams['mean_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($mean_percentile_monte_carlo);
        }
        // query params
        if ($min_percentile_monte_carlo !== null) {
            $queryParams['min_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($min_percentile_monte_carlo);
        }
        // query params
        if ($moving_average_n_day !== null) {
            $queryParams['moving_average_n_day'] = ObjectSerializer::toQueryValue($moving_average_n_day);
        }
        // query params
        if ($n_day_returns !== null) {
            $queryParams['n_day_returns'] = ObjectSerializer::toQueryValue($n_day_returns);
        }
        // query params
        if ($n_path_monte_carlo !== null) {
            $queryParams['n_path_monte_carlo'] = ObjectSerializer::toQueryValue($n_path_monte_carlo);
        }
        // query params
        if ($n_rolling_max_drawdown !== null) {
            $queryParams['n_rolling_max_drawdown'] = ObjectSerializer::toQueryValue($n_rolling_max_drawdown);
        }
        // query params
        if ($n_rolling_volatility !== null) {
            $queryParams['n_rolling_volatility'] = ObjectSerializer::toQueryValue($n_rolling_volatility);
        }
        // query params
        if ($num_sim_monte_carlo !== null) {
            $queryParams['num_sim_monte_carlo'] = ObjectSerializer::toQueryValue($num_sim_monte_carlo);
        }
        // query params
        if ($period_type !== null) {
            $queryParams['period_type'] = ObjectSerializer::toQueryValue($period_type);
        }
        // query params
        if ($risk_free_alpha !== null) {
            $queryParams['risk_free_alpha'] = ObjectSerializer::toQueryValue($risk_free_alpha);
        }
        // query params
        if ($risk_free_sharpe !== null) {
            $queryParams['risk_free_sharpe'] = ObjectSerializer::toQueryValue($risk_free_sharpe);
        }
        // query params
        if ($risk_free_sortino !== null) {
            $queryParams['risk_free_sortino'] = ObjectSerializer::toQueryValue($risk_free_sortino);
        }
        // query params
        if ($risk_free_treynor !== null) {
            $queryParams['risk_free_treynor'] = ObjectSerializer::toQueryValue($risk_free_treynor);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($stat !== null) {
            $queryParams['stat'] = ObjectSerializer::toQueryValue($stat);
        }
        // query params
        if ($var_conf_interval !== null) {
            $queryParams['var_conf_interval'] = ObjectSerializer::toQueryValue($var_conf_interval);
        }

        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client_id' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGoalPerformanceUsingGet
     *
     * Goal Performance
     *
     * @param  string $client_id client_id (required)
     * @param  string $goal_id Goal Id - /account (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional, default to null)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  bool $portfolio_goal portfolio_goal (optional, default to false)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional, default to null)
     * @param  string $stat A stat type - /statistics (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getGoalPerformanceUsingGet($client_id, $goal_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = 'null', $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $portfolio_goal = 'false', $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = 'null', $stat = null, $var_conf_interval = null)
    {
        list($response) = $this->getGoalPerformanceUsingGetWithHttpInfo($client_id, $goal_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $portfolio_goal, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);
        return $response;
    }

    /**
     * Operation getGoalPerformanceUsingGetWithHttpInfo
     *
     * Goal Performance
     *
     * @param  string $client_id client_id (required)
     * @param  string $goal_id Goal Id - /account (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional, default to null)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  bool $portfolio_goal portfolio_goal (optional, default to false)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional, default to null)
     * @param  string $stat A stat type - /statistics (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGoalPerformanceUsingGetWithHttpInfo($client_id, $goal_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = 'null', $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $portfolio_goal = 'false', $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = 'null', $stat = null, $var_conf_interval = null)
    {
        $returnType = 'object';
        $request = $this->getGoalPerformanceUsingGetRequest($client_id, $goal_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $portfolio_goal, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGoalPerformanceUsingGetAsync
     *
     * Goal Performance
     *
     * @param  string $client_id client_id (required)
     * @param  string $goal_id Goal Id - /account (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional, default to null)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  bool $portfolio_goal portfolio_goal (optional, default to false)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional, default to null)
     * @param  string $stat A stat type - /statistics (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalPerformanceUsingGetAsync($client_id, $goal_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = 'null', $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $portfolio_goal = 'false', $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = 'null', $stat = null, $var_conf_interval = null)
    {
        return $this->getGoalPerformanceUsingGetAsyncWithHttpInfo($client_id, $goal_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $portfolio_goal, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGoalPerformanceUsingGetAsyncWithHttpInfo
     *
     * Goal Performance
     *
     * @param  string $client_id client_id (required)
     * @param  string $goal_id Goal Id - /account (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional, default to null)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  bool $portfolio_goal portfolio_goal (optional, default to false)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional, default to null)
     * @param  string $stat A stat type - /statistics (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalPerformanceUsingGetAsyncWithHttpInfo($client_id, $goal_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = 'null', $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $portfolio_goal = 'false', $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = 'null', $stat = null, $var_conf_interval = null)
    {
        $returnType = 'object';
        $request = $this->getGoalPerformanceUsingGetRequest($client_id, $goal_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $portfolio_goal, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGoalPerformanceUsingGet'
     *
     * @param  string $client_id client_id (required)
     * @param  string $goal_id Goal Id - /account (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional, default to null)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  bool $portfolio_goal portfolio_goal (optional, default to false)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional, default to null)
     * @param  string $stat A stat type - /statistics (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getGoalPerformanceUsingGetRequest($client_id, $goal_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = 'null', $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $portfolio_goal = 'false', $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = 'null', $stat = null, $var_conf_interval = null)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling getGoalPerformanceUsingGet'
            );
        }
        // verify the required parameter 'goal_id' is set
        if ($goal_id === null || (is_array($goal_id) && count($goal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_id when calling getGoalPerformanceUsingGet'
            );
        }

        $resourcePath = '/goal/{goal_id}/performance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($active_premium_period !== null) {
            $queryParams['active_premium_period'] = ObjectSerializer::toQueryValue($active_premium_period);
        }
        // query params
        if ($annualized_return_period !== null) {
            $queryParams['annualized_return_period'] = ObjectSerializer::toQueryValue($annualized_return_period);
        }
        // query params
        if ($benchmark_id !== null) {
            $queryParams['benchmark_id'] = ObjectSerializer::toQueryValue($benchmark_id);
        }
        // query params
        if ($client_id !== null) {
            $queryParams['client_id'] = ObjectSerializer::toQueryValue($client_id);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($hist_factor !== null) {
            $queryParams['hist_factor'] = ObjectSerializer::toQueryValue($hist_factor);
        }
        // query params
        if ($mar_down_side_deviation !== null) {
            $queryParams['mar_down_side_deviation'] = ObjectSerializer::toQueryValue($mar_down_side_deviation);
        }
        // query params
        if ($max_percentile_monte_carlo !== null) {
            $queryParams['max_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($max_percentile_monte_carlo);
        }
        // query params
        if ($mean_percentile_monte_carlo !== null) {
            $queryParams['mean_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($mean_percentile_monte_carlo);
        }
        // query params
        if ($min_percentile_monte_carlo !== null) {
            $queryParams['min_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($min_percentile_monte_carlo);
        }
        // query params
        if ($moving_average_n_day !== null) {
            $queryParams['moving_average_n_day'] = ObjectSerializer::toQueryValue($moving_average_n_day);
        }
        // query params
        if ($n_day_returns !== null) {
            $queryParams['n_day_returns'] = ObjectSerializer::toQueryValue($n_day_returns);
        }
        // query params
        if ($n_path_monte_carlo !== null) {
            $queryParams['n_path_monte_carlo'] = ObjectSerializer::toQueryValue($n_path_monte_carlo);
        }
        // query params
        if ($n_rolling_max_drawdown !== null) {
            $queryParams['n_rolling_max_drawdown'] = ObjectSerializer::toQueryValue($n_rolling_max_drawdown);
        }
        // query params
        if ($n_rolling_volatility !== null) {
            $queryParams['n_rolling_volatility'] = ObjectSerializer::toQueryValue($n_rolling_volatility);
        }
        // query params
        if ($num_sim_monte_carlo !== null) {
            $queryParams['num_sim_monte_carlo'] = ObjectSerializer::toQueryValue($num_sim_monte_carlo);
        }
        // query params
        if ($period_type !== null) {
            $queryParams['period_type'] = ObjectSerializer::toQueryValue($period_type);
        }
        // query params
        if ($portfolio_goal !== null) {
            $queryParams['portfolio_goal'] = ObjectSerializer::toQueryValue($portfolio_goal);
        }
        // query params
        if ($risk_free_alpha !== null) {
            $queryParams['risk_free_alpha'] = ObjectSerializer::toQueryValue($risk_free_alpha);
        }
        // query params
        if ($risk_free_sharpe !== null) {
            $queryParams['risk_free_sharpe'] = ObjectSerializer::toQueryValue($risk_free_sharpe);
        }
        // query params
        if ($risk_free_sortino !== null) {
            $queryParams['risk_free_sortino'] = ObjectSerializer::toQueryValue($risk_free_sortino);
        }
        // query params
        if ($risk_free_treynor !== null) {
            $queryParams['risk_free_treynor'] = ObjectSerializer::toQueryValue($risk_free_treynor);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($stat !== null) {
            $queryParams['stat'] = ObjectSerializer::toQueryValue($stat);
        }
        // query params
        if ($var_conf_interval !== null) {
            $queryParams['var_conf_interval'] = ObjectSerializer::toQueryValue($var_conf_interval);
        }

        // path params
        if ($goal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goal_id' . '}',
                ObjectSerializer::toPathValue($goal_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHouseholdClientPerformanceUsingGet
     *
     * Household Performance
     *
     * @param  string $household_id Household Id -/household (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type -- /statistics (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getHouseholdClientPerformanceUsingGet($household_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        list($response) = $this->getHouseholdClientPerformanceUsingGetWithHttpInfo($household_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);
        return $response;
    }

    /**
     * Operation getHouseholdClientPerformanceUsingGetWithHttpInfo
     *
     * Household Performance
     *
     * @param  string $household_id Household Id -/household (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type -- /statistics (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHouseholdClientPerformanceUsingGetWithHttpInfo($household_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        $returnType = 'object';
        $request = $this->getHouseholdClientPerformanceUsingGetRequest($household_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHouseholdClientPerformanceUsingGetAsync
     *
     * Household Performance
     *
     * @param  string $household_id Household Id -/household (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type -- /statistics (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHouseholdClientPerformanceUsingGetAsync($household_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        return $this->getHouseholdClientPerformanceUsingGetAsyncWithHttpInfo($household_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHouseholdClientPerformanceUsingGetAsyncWithHttpInfo
     *
     * Household Performance
     *
     * @param  string $household_id Household Id -/household (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type -- /statistics (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHouseholdClientPerformanceUsingGetAsyncWithHttpInfo($household_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        $returnType = 'object';
        $request = $this->getHouseholdClientPerformanceUsingGetRequest($household_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHouseholdClientPerformanceUsingGet'
     *
     * @param  string $household_id Household Id -/household (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type -- /statistics (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHouseholdClientPerformanceUsingGetRequest($household_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        // verify the required parameter 'household_id' is set
        if ($household_id === null || (is_array($household_id) && count($household_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $household_id when calling getHouseholdClientPerformanceUsingGet'
            );
        }

        $resourcePath = '/household/{household_id}/performance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($active_premium_period !== null) {
            $queryParams['active_premium_period'] = ObjectSerializer::toQueryValue($active_premium_period);
        }
        // query params
        if ($annualized_return_period !== null) {
            $queryParams['annualized_return_period'] = ObjectSerializer::toQueryValue($annualized_return_period);
        }
        // query params
        if ($benchmark_id !== null) {
            $queryParams['benchmark_id'] = ObjectSerializer::toQueryValue($benchmark_id);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($hist_factor !== null) {
            $queryParams['hist_factor'] = ObjectSerializer::toQueryValue($hist_factor);
        }
        // query params
        if ($mar_down_side_deviation !== null) {
            $queryParams['mar_down_side_deviation'] = ObjectSerializer::toQueryValue($mar_down_side_deviation);
        }
        // query params
        if ($max_percentile_monte_carlo !== null) {
            $queryParams['max_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($max_percentile_monte_carlo);
        }
        // query params
        if ($mean_percentile_monte_carlo !== null) {
            $queryParams['mean_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($mean_percentile_monte_carlo);
        }
        // query params
        if ($min_percentile_monte_carlo !== null) {
            $queryParams['min_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($min_percentile_monte_carlo);
        }
        // query params
        if ($moving_average_n_day !== null) {
            $queryParams['moving_average_n_day'] = ObjectSerializer::toQueryValue($moving_average_n_day);
        }
        // query params
        if ($n_day_returns !== null) {
            $queryParams['n_day_returns'] = ObjectSerializer::toQueryValue($n_day_returns);
        }
        // query params
        if ($n_path_monte_carlo !== null) {
            $queryParams['n_path_monte_carlo'] = ObjectSerializer::toQueryValue($n_path_monte_carlo);
        }
        // query params
        if ($n_rolling_max_drawdown !== null) {
            $queryParams['n_rolling_max_drawdown'] = ObjectSerializer::toQueryValue($n_rolling_max_drawdown);
        }
        // query params
        if ($n_rolling_volatility !== null) {
            $queryParams['n_rolling_volatility'] = ObjectSerializer::toQueryValue($n_rolling_volatility);
        }
        // query params
        if ($num_sim_monte_carlo !== null) {
            $queryParams['num_sim_monte_carlo'] = ObjectSerializer::toQueryValue($num_sim_monte_carlo);
        }
        // query params
        if ($period_type !== null) {
            $queryParams['period_type'] = ObjectSerializer::toQueryValue($period_type);
        }
        // query params
        if ($risk_free_alpha !== null) {
            $queryParams['risk_free_alpha'] = ObjectSerializer::toQueryValue($risk_free_alpha);
        }
        // query params
        if ($risk_free_sharpe !== null) {
            $queryParams['risk_free_sharpe'] = ObjectSerializer::toQueryValue($risk_free_sharpe);
        }
        // query params
        if ($risk_free_sortino !== null) {
            $queryParams['risk_free_sortino'] = ObjectSerializer::toQueryValue($risk_free_sortino);
        }
        // query params
        if ($risk_free_treynor !== null) {
            $queryParams['risk_free_treynor'] = ObjectSerializer::toQueryValue($risk_free_treynor);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($stat !== null) {
            $queryParams['stat'] = ObjectSerializer::toQueryValue($stat);
        }
        // query params
        if ($var_conf_interval !== null) {
            $queryParams['var_conf_interval'] = ObjectSerializer::toQueryValue($var_conf_interval);
        }

        // path params
        if ($household_id !== null) {
            $resourcePath = str_replace(
                '{' . 'household_id' . '}',
                ObjectSerializer::toPathValue($household_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModelPerformanceUsingGet
     *
     * Model Performance
     *
     * @param  string $model_id Model Id - /model (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Tenant Benchmark Id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat Stat Type (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getModelPerformanceUsingGet($model_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        list($response) = $this->getModelPerformanceUsingGetWithHttpInfo($model_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);
        return $response;
    }

    /**
     * Operation getModelPerformanceUsingGetWithHttpInfo
     *
     * Model Performance
     *
     * @param  string $model_id Model Id - /model (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Tenant Benchmark Id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat Stat Type (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModelPerformanceUsingGetWithHttpInfo($model_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        $returnType = 'object';
        $request = $this->getModelPerformanceUsingGetRequest($model_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModelPerformanceUsingGetAsync
     *
     * Model Performance
     *
     * @param  string $model_id Model Id - /model (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Tenant Benchmark Id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat Stat Type (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelPerformanceUsingGetAsync($model_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        return $this->getModelPerformanceUsingGetAsyncWithHttpInfo($model_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getModelPerformanceUsingGetAsyncWithHttpInfo
     *
     * Model Performance
     *
     * @param  string $model_id Model Id - /model (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Tenant Benchmark Id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat Stat Type (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelPerformanceUsingGetAsyncWithHttpInfo($model_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        $returnType = 'object';
        $request = $this->getModelPerformanceUsingGetRequest($model_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModelPerformanceUsingGet'
     *
     * @param  string $model_id Model Id - /model (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Tenant Benchmark Id -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat Stat Type (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getModelPerformanceUsingGetRequest($model_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        // verify the required parameter 'model_id' is set
        if ($model_id === null || (is_array($model_id) && count($model_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_id when calling getModelPerformanceUsingGet'
            );
        }

        $resourcePath = '/model/{model_id}/performance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($active_premium_period !== null) {
            $queryParams['active_premium_period'] = ObjectSerializer::toQueryValue($active_premium_period);
        }
        // query params
        if ($annualized_return_period !== null) {
            $queryParams['annualized_return_period'] = ObjectSerializer::toQueryValue($annualized_return_period);
        }
        // query params
        if ($benchmark_id !== null) {
            $queryParams['benchmark_id'] = ObjectSerializer::toQueryValue($benchmark_id);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($hist_factor !== null) {
            $queryParams['hist_factor'] = ObjectSerializer::toQueryValue($hist_factor);
        }
        // query params
        if ($mar_down_side_deviation !== null) {
            $queryParams['mar_down_side_deviation'] = ObjectSerializer::toQueryValue($mar_down_side_deviation);
        }
        // query params
        if ($max_percentile_monte_carlo !== null) {
            $queryParams['max_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($max_percentile_monte_carlo);
        }
        // query params
        if ($mean_percentile_monte_carlo !== null) {
            $queryParams['mean_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($mean_percentile_monte_carlo);
        }
        // query params
        if ($min_percentile_monte_carlo !== null) {
            $queryParams['min_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($min_percentile_monte_carlo);
        }
        // query params
        if ($moving_average_n_day !== null) {
            $queryParams['moving_average_n_day'] = ObjectSerializer::toQueryValue($moving_average_n_day);
        }
        // query params
        if ($n_day_returns !== null) {
            $queryParams['n_day_returns'] = ObjectSerializer::toQueryValue($n_day_returns);
        }
        // query params
        if ($n_path_monte_carlo !== null) {
            $queryParams['n_path_monte_carlo'] = ObjectSerializer::toQueryValue($n_path_monte_carlo);
        }
        // query params
        if ($n_rolling_max_drawdown !== null) {
            $queryParams['n_rolling_max_drawdown'] = ObjectSerializer::toQueryValue($n_rolling_max_drawdown);
        }
        // query params
        if ($n_rolling_volatility !== null) {
            $queryParams['n_rolling_volatility'] = ObjectSerializer::toQueryValue($n_rolling_volatility);
        }
        // query params
        if ($num_sim_monte_carlo !== null) {
            $queryParams['num_sim_monte_carlo'] = ObjectSerializer::toQueryValue($num_sim_monte_carlo);
        }
        // query params
        if ($period_type !== null) {
            $queryParams['period_type'] = ObjectSerializer::toQueryValue($period_type);
        }
        // query params
        if ($risk_free_alpha !== null) {
            $queryParams['risk_free_alpha'] = ObjectSerializer::toQueryValue($risk_free_alpha);
        }
        // query params
        if ($risk_free_sharpe !== null) {
            $queryParams['risk_free_sharpe'] = ObjectSerializer::toQueryValue($risk_free_sharpe);
        }
        // query params
        if ($risk_free_sortino !== null) {
            $queryParams['risk_free_sortino'] = ObjectSerializer::toQueryValue($risk_free_sortino);
        }
        // query params
        if ($risk_free_treynor !== null) {
            $queryParams['risk_free_treynor'] = ObjectSerializer::toQueryValue($risk_free_treynor);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($stat !== null) {
            $queryParams['stat'] = ObjectSerializer::toQueryValue($stat);
        }
        // query params
        if ($var_conf_interval !== null) {
            $queryParams['var_conf_interval'] = ObjectSerializer::toQueryValue($var_conf_interval);
        }

        // path params
        if ($model_id !== null) {
            $resourcePath = str_replace(
                '{' . 'model_id' . '}',
                ObjectSerializer::toPathValue($model_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPortfolioPerformanceUsingGet
     *
     * Portfolio Performance
     *
     * @param  string $portfolio_id Portfolio Id -/portoflio (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Benchmark Id - benchmarkId or clientBenchmarkId -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type - /statistics endpoint to get types (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getPortfolioPerformanceUsingGet($portfolio_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        list($response) = $this->getPortfolioPerformanceUsingGetWithHttpInfo($portfolio_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);
        return $response;
    }

    /**
     * Operation getPortfolioPerformanceUsingGetWithHttpInfo
     *
     * Portfolio Performance
     *
     * @param  string $portfolio_id Portfolio Id -/portoflio (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Benchmark Id - benchmarkId or clientBenchmarkId -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type - /statistics endpoint to get types (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPortfolioPerformanceUsingGetWithHttpInfo($portfolio_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        $returnType = 'object';
        $request = $this->getPortfolioPerformanceUsingGetRequest($portfolio_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPortfolioPerformanceUsingGetAsync
     *
     * Portfolio Performance
     *
     * @param  string $portfolio_id Portfolio Id -/portoflio (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Benchmark Id - benchmarkId or clientBenchmarkId -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type - /statistics endpoint to get types (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPortfolioPerformanceUsingGetAsync($portfolio_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        return $this->getPortfolioPerformanceUsingGetAsyncWithHttpInfo($portfolio_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPortfolioPerformanceUsingGetAsyncWithHttpInfo
     *
     * Portfolio Performance
     *
     * @param  string $portfolio_id Portfolio Id -/portoflio (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Benchmark Id - benchmarkId or clientBenchmarkId -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type - /statistics endpoint to get types (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPortfolioPerformanceUsingGetAsyncWithHttpInfo($portfolio_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        $returnType = 'object';
        $request = $this->getPortfolioPerformanceUsingGetRequest($portfolio_id, $active_premium_period, $annualized_return_period, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $var_conf_interval);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPortfolioPerformanceUsingGet'
     *
     * @param  string $portfolio_id Portfolio Id -/portoflio (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $benchmark_id Benchmark Id - benchmarkId or clientBenchmarkId -/benchmark (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date start date (optional)
     * @param  string $stat A stat type - /statistics endpoint to get types (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPortfolioPerformanceUsingGetRequest($portfolio_id, $active_premium_period = null, $annualized_return_period = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $var_conf_interval = null)
    {
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling getPortfolioPerformanceUsingGet'
            );
        }

        $resourcePath = '/portfolio/{portfolio_id}/performance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($active_premium_period !== null) {
            $queryParams['active_premium_period'] = ObjectSerializer::toQueryValue($active_premium_period);
        }
        // query params
        if ($annualized_return_period !== null) {
            $queryParams['annualized_return_period'] = ObjectSerializer::toQueryValue($annualized_return_period);
        }
        // query params
        if ($benchmark_id !== null) {
            $queryParams['benchmark_id'] = ObjectSerializer::toQueryValue($benchmark_id);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($hist_factor !== null) {
            $queryParams['hist_factor'] = ObjectSerializer::toQueryValue($hist_factor);
        }
        // query params
        if ($mar_down_side_deviation !== null) {
            $queryParams['mar_down_side_deviation'] = ObjectSerializer::toQueryValue($mar_down_side_deviation);
        }
        // query params
        if ($max_percentile_monte_carlo !== null) {
            $queryParams['max_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($max_percentile_monte_carlo);
        }
        // query params
        if ($mean_percentile_monte_carlo !== null) {
            $queryParams['mean_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($mean_percentile_monte_carlo);
        }
        // query params
        if ($min_percentile_monte_carlo !== null) {
            $queryParams['min_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($min_percentile_monte_carlo);
        }
        // query params
        if ($moving_average_n_day !== null) {
            $queryParams['moving_average_n_day'] = ObjectSerializer::toQueryValue($moving_average_n_day);
        }
        // query params
        if ($n_day_returns !== null) {
            $queryParams['n_day_returns'] = ObjectSerializer::toQueryValue($n_day_returns);
        }
        // query params
        if ($n_path_monte_carlo !== null) {
            $queryParams['n_path_monte_carlo'] = ObjectSerializer::toQueryValue($n_path_monte_carlo);
        }
        // query params
        if ($n_rolling_max_drawdown !== null) {
            $queryParams['n_rolling_max_drawdown'] = ObjectSerializer::toQueryValue($n_rolling_max_drawdown);
        }
        // query params
        if ($n_rolling_volatility !== null) {
            $queryParams['n_rolling_volatility'] = ObjectSerializer::toQueryValue($n_rolling_volatility);
        }
        // query params
        if ($num_sim_monte_carlo !== null) {
            $queryParams['num_sim_monte_carlo'] = ObjectSerializer::toQueryValue($num_sim_monte_carlo);
        }
        // query params
        if ($period_type !== null) {
            $queryParams['period_type'] = ObjectSerializer::toQueryValue($period_type);
        }
        // query params
        if ($risk_free_alpha !== null) {
            $queryParams['risk_free_alpha'] = ObjectSerializer::toQueryValue($risk_free_alpha);
        }
        // query params
        if ($risk_free_sharpe !== null) {
            $queryParams['risk_free_sharpe'] = ObjectSerializer::toQueryValue($risk_free_sharpe);
        }
        // query params
        if ($risk_free_sortino !== null) {
            $queryParams['risk_free_sortino'] = ObjectSerializer::toQueryValue($risk_free_sortino);
        }
        // query params
        if ($risk_free_treynor !== null) {
            $queryParams['risk_free_treynor'] = ObjectSerializer::toQueryValue($risk_free_treynor);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($stat !== null) {
            $queryParams['stat'] = ObjectSerializer::toQueryValue($stat);
        }
        // query params
        if ($var_conf_interval !== null) {
            $queryParams['var_conf_interval'] = ObjectSerializer::toQueryValue($var_conf_interval);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolio_id' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSecurityPerformanceUsingGet
     *
     * Security Performance
     *
     * @param  string $security_id security_id (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $bench_ticker Bench Ticker for security - (default: ^GSPC) (optional)
     * @param  string $benchmark_id benchmark_id (optional)
     * @param  \DateTime $end_date Ending parameter for time window (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date Starting parameter for time window (optional)
     * @param  string $stat A stat type - /statistics endpoint (optional)
     * @param  string $ticker Ticker for security (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getSecurityPerformanceUsingGet($security_id, $active_premium_period = null, $annualized_return_period = null, $bench_ticker = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $ticker = null, $var_conf_interval = null)
    {
        list($response) = $this->getSecurityPerformanceUsingGetWithHttpInfo($security_id, $active_premium_period, $annualized_return_period, $bench_ticker, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $ticker, $var_conf_interval);
        return $response;
    }

    /**
     * Operation getSecurityPerformanceUsingGetWithHttpInfo
     *
     * Security Performance
     *
     * @param  string $security_id security_id (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $bench_ticker Bench Ticker for security - (default: ^GSPC) (optional)
     * @param  string $benchmark_id benchmark_id (optional)
     * @param  \DateTime $end_date Ending parameter for time window (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date Starting parameter for time window (optional)
     * @param  string $stat A stat type - /statistics endpoint (optional)
     * @param  string $ticker Ticker for security (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSecurityPerformanceUsingGetWithHttpInfo($security_id, $active_premium_period = null, $annualized_return_period = null, $bench_ticker = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $ticker = null, $var_conf_interval = null)
    {
        $returnType = 'object';
        $request = $this->getSecurityPerformanceUsingGetRequest($security_id, $active_premium_period, $annualized_return_period, $bench_ticker, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $ticker, $var_conf_interval);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSecurityPerformanceUsingGetAsync
     *
     * Security Performance
     *
     * @param  string $security_id security_id (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $bench_ticker Bench Ticker for security - (default: ^GSPC) (optional)
     * @param  string $benchmark_id benchmark_id (optional)
     * @param  \DateTime $end_date Ending parameter for time window (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date Starting parameter for time window (optional)
     * @param  string $stat A stat type - /statistics endpoint (optional)
     * @param  string $ticker Ticker for security (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSecurityPerformanceUsingGetAsync($security_id, $active_premium_period = null, $annualized_return_period = null, $bench_ticker = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $ticker = null, $var_conf_interval = null)
    {
        return $this->getSecurityPerformanceUsingGetAsyncWithHttpInfo($security_id, $active_premium_period, $annualized_return_period, $bench_ticker, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $ticker, $var_conf_interval)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSecurityPerformanceUsingGetAsyncWithHttpInfo
     *
     * Security Performance
     *
     * @param  string $security_id security_id (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $bench_ticker Bench Ticker for security - (default: ^GSPC) (optional)
     * @param  string $benchmark_id benchmark_id (optional)
     * @param  \DateTime $end_date Ending parameter for time window (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date Starting parameter for time window (optional)
     * @param  string $stat A stat type - /statistics endpoint (optional)
     * @param  string $ticker Ticker for security (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSecurityPerformanceUsingGetAsyncWithHttpInfo($security_id, $active_premium_period = null, $annualized_return_period = null, $bench_ticker = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $ticker = null, $var_conf_interval = null)
    {
        $returnType = 'object';
        $request = $this->getSecurityPerformanceUsingGetRequest($security_id, $active_premium_period, $annualized_return_period, $bench_ticker, $benchmark_id, $end_date, $hist_factor, $mar_down_side_deviation, $max_percentile_monte_carlo, $mean_percentile_monte_carlo, $min_percentile_monte_carlo, $moving_average_n_day, $n_day_returns, $n_path_monte_carlo, $n_rolling_max_drawdown, $n_rolling_volatility, $num_sim_monte_carlo, $period_type, $risk_free_alpha, $risk_free_sharpe, $risk_free_sortino, $risk_free_treynor, $start_date, $stat, $ticker, $var_conf_interval);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSecurityPerformanceUsingGet'
     *
     * @param  string $security_id security_id (required)
     * @param  string $active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param  string $bench_ticker Bench Ticker for security - (default: ^GSPC) (optional)
     * @param  string $benchmark_id benchmark_id (optional)
     * @param  \DateTime $end_date Ending parameter for time window (optional)
     * @param  double $hist_factor Histogram factor- (statId: 39, default: 5) (optional)
     * @param  double $mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) (optional)
     * @param  double $max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param  double $mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param  double $min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param  int $moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param  int $n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7) (optional)
     * @param  int $n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param  int $n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param  int $n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param  int $num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) (optional)
     * @param  string $period_type Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param  double $risk_free_alpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param  double $risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) (optional)
     * @param  double $risk_free_sortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param  double $risk_free_treynor risk free val treynor- (statId: 51, default: 0) (optional)
     * @param  \DateTime $start_date Starting parameter for time window (optional)
     * @param  string $stat A stat type - /statistics endpoint (optional)
     * @param  string $ticker Ticker for security (optional)
     * @param  double $var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSecurityPerformanceUsingGetRequest($security_id, $active_premium_period = null, $annualized_return_period = null, $bench_ticker = null, $benchmark_id = null, $end_date = null, $hist_factor = null, $mar_down_side_deviation = null, $max_percentile_monte_carlo = null, $mean_percentile_monte_carlo = null, $min_percentile_monte_carlo = null, $moving_average_n_day = null, $n_day_returns = null, $n_path_monte_carlo = null, $n_rolling_max_drawdown = null, $n_rolling_volatility = null, $num_sim_monte_carlo = null, $period_type = null, $risk_free_alpha = null, $risk_free_sharpe = null, $risk_free_sortino = null, $risk_free_treynor = null, $start_date = null, $stat = null, $ticker = null, $var_conf_interval = null)
    {
        // verify the required parameter 'security_id' is set
        if ($security_id === null || (is_array($security_id) && count($security_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $security_id when calling getSecurityPerformanceUsingGet'
            );
        }

        $resourcePath = '/security/{security_id}/performance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($active_premium_period !== null) {
            $queryParams['active_premium_period'] = ObjectSerializer::toQueryValue($active_premium_period);
        }
        // query params
        if ($annualized_return_period !== null) {
            $queryParams['annualized_return_period'] = ObjectSerializer::toQueryValue($annualized_return_period);
        }
        // query params
        if ($bench_ticker !== null) {
            $queryParams['benchTicker'] = ObjectSerializer::toQueryValue($bench_ticker);
        }
        // query params
        if ($benchmark_id !== null) {
            $queryParams['benchmark_id'] = ObjectSerializer::toQueryValue($benchmark_id);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($hist_factor !== null) {
            $queryParams['hist_factor'] = ObjectSerializer::toQueryValue($hist_factor);
        }
        // query params
        if ($mar_down_side_deviation !== null) {
            $queryParams['mar_down_side_deviation'] = ObjectSerializer::toQueryValue($mar_down_side_deviation);
        }
        // query params
        if ($max_percentile_monte_carlo !== null) {
            $queryParams['max_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($max_percentile_monte_carlo);
        }
        // query params
        if ($mean_percentile_monte_carlo !== null) {
            $queryParams['mean_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($mean_percentile_monte_carlo);
        }
        // query params
        if ($min_percentile_monte_carlo !== null) {
            $queryParams['min_percentile_monte_carlo'] = ObjectSerializer::toQueryValue($min_percentile_monte_carlo);
        }
        // query params
        if ($moving_average_n_day !== null) {
            $queryParams['moving_average_n_day'] = ObjectSerializer::toQueryValue($moving_average_n_day);
        }
        // query params
        if ($n_day_returns !== null) {
            $queryParams['n_day_returns'] = ObjectSerializer::toQueryValue($n_day_returns);
        }
        // query params
        if ($n_path_monte_carlo !== null) {
            $queryParams['n_path_monte_carlo'] = ObjectSerializer::toQueryValue($n_path_monte_carlo);
        }
        // query params
        if ($n_rolling_max_drawdown !== null) {
            $queryParams['n_rolling_max_drawdown'] = ObjectSerializer::toQueryValue($n_rolling_max_drawdown);
        }
        // query params
        if ($n_rolling_volatility !== null) {
            $queryParams['n_rolling_volatility'] = ObjectSerializer::toQueryValue($n_rolling_volatility);
        }
        // query params
        if ($num_sim_monte_carlo !== null) {
            $queryParams['num_sim_monte_carlo'] = ObjectSerializer::toQueryValue($num_sim_monte_carlo);
        }
        // query params
        if ($period_type !== null) {
            $queryParams['period_type'] = ObjectSerializer::toQueryValue($period_type);
        }
        // query params
        if ($risk_free_alpha !== null) {
            $queryParams['risk_free_alpha'] = ObjectSerializer::toQueryValue($risk_free_alpha);
        }
        // query params
        if ($risk_free_sharpe !== null) {
            $queryParams['risk_free_sharpe'] = ObjectSerializer::toQueryValue($risk_free_sharpe);
        }
        // query params
        if ($risk_free_sortino !== null) {
            $queryParams['risk_free_sortino'] = ObjectSerializer::toQueryValue($risk_free_sortino);
        }
        // query params
        if ($risk_free_treynor !== null) {
            $queryParams['risk_free_treynor'] = ObjectSerializer::toQueryValue($risk_free_treynor);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($stat !== null) {
            $queryParams['stat'] = ObjectSerializer::toQueryValue($stat);
        }
        // query params
        if ($ticker !== null) {
            $queryParams['ticker'] = ObjectSerializer::toQueryValue($ticker);
        }
        // query params
        if ($var_conf_interval !== null) {
            $queryParams['var_conf_interval'] = ObjectSerializer::toQueryValue($var_conf_interval);
        }

        // path params
        if ($security_id !== null) {
            $resourcePath = str_replace(
                '{' . 'security_id' . '}',
                ObjectSerializer::toPathValue($security_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
